# Copyright 2019 PIQuIL - All Rights Reserved.

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# ----------------------------------------------------------------------------

# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#

import inspect
import os
import shutil
import subprocess
import sys
from operator import attrgetter
from datetime import date


from sphinxcontrib.spelling.filters import ContractionFilter


sys.path.insert(0, os.path.abspath("../"))


# -- Project information -----------------------------------------------------

project = "QuCumber"
author = "PIQuIL"
copyright = f"2018-{date.today().year}, {author}"


init_file = {}
with open("../qucumber/__version__.py") as f:
    # The short X.Y.Z version
    exec(f.read(), init_file)
    version = init_file["__version__"]


# The remainder of this section was adapted from nbsphinx's conf.py
# https://github.com/spatialaudio/nbsphinx/blob/e36da77/doc/conf.py

# Copyright (c) 2018-2019 PIQuIL - All rights reserved.
# Copyright (c) 2015–2019 Matthias Geier.

# The full license is in the file LICENSE.txt, distributed with this software.

try:
    release = (
        subprocess.check_output(["git", "describe", "--tags", "--always"])
        .decode()
        .strip()
    )

    today = (
        subprocess.check_output(["git", "show", "-s", "--format=%ad", "--date=short"])
        .decode()
        .strip()
    )
except Exception:
    release = "<unknown_release>"
    today = "<unknown_date>"


print("Building version: " + version + "; release: " + release)


# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
needs_sphinx = "2.0.1"

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    "sphinx.ext.autodoc",
    "sphinx.ext.doctest",
    "sphinx.ext.todo",
    "sphinx.ext.coverage",
    "sphinx.ext.imgmath",
    "sphinx.ext.linkcode",
    "sphinx.ext.intersphinx",
    "sphinx.ext.napoleon",
    "sphinxcontrib.spelling",
    "nbsphinx",
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = ".rst"

# The master toctree document.
master_doc = "index"

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path .
exclude_patterns = ["_build", "Thumbs.db", ".DS_Store", "**.ipynb_checkpoints"]

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = "sphinx"

# Enable nitpicky mode
nitpicky = True

# Things that nitpick mode should ignore.
nitpick_ignore = [
    ("py:class", "type"),
    ("py:class", "int"),
    ("py:class", "float"),
    ("py:class", "bool"),
    ("py:class", "dict"),
    ("py:class", "list"),
    ("py:class", "tuple"),
    ("py:class", "str"),
    ("py:class", "file"),
    ("py:class", "callable"),
    ("py:class", "classmethod"),
    ("py:class", "torch.nn.modules.module.Module"),
    ("py:obj", "None"),
    ("py:obj", "ndarray"),
    ("py:exc", "ValueError"),
]

suppress_warnings = ["epub.unknown_project_files"]

# -- Options for HTML output -------------------------------------------------

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
html_theme_options = {"canonical_url": "https://qucumber.readthedocs.io/en/stable/"}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ["_static"]

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}

# The remainder of this section was adapted from skorch's conf.py
# https://github.com/dnouri/skorch/blob/c08d502/docs/conf.py

# Copyright (c) 2018-2019 PIQuIL - All rights reserved.
# Copyright (c) 2017, Benjamin Bossan, Daniel Nouri, Marian Tietz - All rights reserved.

# The full license is in the file LICENSE.txt, distributed with this software.

# check if docs are being built on RTD
on_rtd = os.environ.get("READTHEDOCS", None) == "True"

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = "default"

if not on_rtd:  # only import and set the theme if we're building docs locally
    import sphinx_rtd_theme

    html_theme = "sphinx_rtd_theme"
    html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]


# -- Options for HTMLHelp output ---------------------------------------------

autodoc_member_order = "alphabetical"
autodoc_mock_imports = ["torch", "tqdm", "numpy", "matplotlib", "scipy"]

# Output file base name for HTML help builder.
htmlhelp_basename = "QuCumberdoc"


# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',
    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',
    # Additional stuff for the LaTeX preamble.
    #
    "preamble": (r"\usepackage{physics}" r"\DeclareMathOperator{\sgn}{sgn}"),
    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, "QuCumber.tex", "QuCumber Documentation", "PIQuIL", "manual")
]


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [(master_doc, "qucumber", "QuCumber Documentation", [author], 1)]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (
        master_doc,
        "QuCumber",
        "QuCumber Documentation",
        author,
        "QuCumber",
        "Neural Network Quantum State Tomography.",
        "Miscellaneous",
    )
]


# -- Extension configuration -------------------------------------------------

# -- Options for spell checking ----------------------------------------------

spelling_ignore_pypi_package_names = True
spelling_filters = [ContractionFilter]  # TODO: fix contractions in spellcheck


# -- Options for todo extension ----------------------------------------------

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = False


# -- Options for linkcheck extension ----------------------------------------------

linkcheck_retries = 5
linkcheck_timeout = 30


# -- Options for imgmath -----------------------------------------------------

imgmath_use_preview = True
imgmath_latex_preamble = latex_elements["preamble"]
imgmath_image_format = "svg"
imgmath_font_size = 13
imgmath_dvisvgm_args = ["--no-fonts", "-e"]


# -- Options for napoleon ----------------------------------------------------

napoleon_google_docstring = True
napoleon_numpy_docstring = True


# -- Options for intersphinx -------------------------------------------------

intersphinx_mapping = {
    "python": ("https://docs.python.org/", None),
    "torch": ("https://pytorch.org/docs/stable/", None),
    "numpy": ("http://docs.scipy.org/doc/numpy/", None),
    "scipy": ("http://docs.scipy.org/doc/scipy/reference", None),
}


# -- Options for linkcode extension ------------------------------------------

# The code in this section has been adapted from scikit-learn's github_link.py
# https://github.com/scikit-learn/scikit-learn/blob/1870d6d/doc/sphinxext/github_link.py

# Copyright (c) 2018-2019 PIQuIL - All rights reserved.
# Copyright (c) 2007–2019 The scikit-learn developers - All rights reserved.

# The full license is in the file LICENSE.txt, distributed with this software.


def _get_git_revision():
    REVISION_CMD = "git rev-parse --short HEAD"
    try:
        revision = subprocess.check_output(REVISION_CMD.split()).strip()
    except (subprocess.CalledProcessError, OSError):
        print("Failed to execute git to get revision")
        return None
    return revision.decode("utf-8")


def linkcode_resolve(domain, info):
    revision = _get_git_revision()
    if revision is None:
        return None
    if domain not in ("py", "pyx"):
        return None
    if not info.get("module") or not info.get("fullname"):
        return None

    class_name = info["fullname"].split(".")[0]
    module = __import__(info["module"], fromlist=[class_name])
    obj = attrgetter(info["fullname"])(module)

    # unwrap decorated functions
    if hasattr(obj, "__wrapped__"):
        obj = obj.__wrapped__

    try:
        file_name = inspect.getsourcefile(obj)
    except Exception:
        file_name = None

    if not file_name:
        try:
            file_name = inspect.getsourcefile(sys.modules[obj.__module__])
        except Exception:
            file_name = None

    if not file_name:
        return None

    relpath_start = os.path.dirname(__import__("qucumber").__file__)
    file_name = os.path.relpath(file_name, start=relpath_start)

    try:
        line_number = inspect.getsourcelines(obj)[1]
    except Exception:
        line_number = ""

    return (
        "https://github.com/PIQuIL/QuCumber/blob"
        "/{revision}/qucumber/{file_name}#L{line_number}".format(
            revision=revision, file_name=file_name, line_number=line_number
        )
    )


# -- End of code from scikit-learn's repo ------------------------------------

# -- Options for nbsphinx ----------------------------------------------------


# The code in this section has been adapted from nbsphinx's conf.py
# https://github.com/spatialaudio/nbsphinx/blob/e36da77/doc/conf.py

# Copyright (c) 2018-2019 PIQuIL - All rights reserved.
# Copyright (c) 2015–2019 Matthias Geier.

# The full license is in the file LICENSE.txt, distributed with this software.

nbsphinx_execute = "never"


# will only link to binders for tagged releases
nbsphinx_prolog = r"""
{% set docname = env.doc2path(env.docname, base='docs') %}
{% set corrected_docname = "/".join(["examples"] + docname.split('/')[2:]) %}
{% set split_rel = env.config.release.split('-') %}
{% set last_tag = "-".join(split_rel[:(-2 if split_rel.__len__() > 2 else None)]) %}

.. only:: html

   .. role:: raw-html(raw)
      :format: html

   .. nbinfo::

      This is a static, non-editable tutorial.

      We recommend you install QuCumber if you want to run the examples locally.
      You can then get an archive file containing the examples from the relevant release
      `here <https://github.com/PIQuIL/QuCumber/releases/tag/{{ last_tag }}>`_.
      Alternatively, you can launch an interactive online version, though it may be a bit slow:
      :raw-html:`<a href="https://mybinder.org/v2/gh/PIQuIL/QuCumber/{{ env.config.release }}?filepath={{ corrected_docname }}"><img alt="Binder badge" src="https://mybinder.org/badge.svg"></a>`

"""


split_rel = release.split("-")
last_tag = "-".join(split_rel[: (-2 if len(split_rel) > 2 else None)])

rst_epilog = (
    ".. |BinderBadge| image:: _static/binder_badge.png \n"
    + ".. _BinderBadge: https://mybinder.org/v2/gh/PIQuIL/QuCumber/"
    + release
    + "\n\n"
    + ".. _Release: https://github.com/PIQuIL/QuCumber/releases/tag/"
    + last_tag
)

conf_location = os.path.realpath(os.path.join(os.getcwd(), os.path.dirname(__file__)))

# the following code snippet was adapted from:
# https://github.com/spatialaudio/nbsphinx/issues/170#issuecomment-373497587

print("Copying example notebooks into docs/_examples")


def all_but_ipynb(directory, contents):
    return [
        c
        for c in contents
        if os.path.isfile(os.path.join(directory, c)) and (not c.endswith(".ipynb"))
    ]


shutil.rmtree(os.path.join(conf_location, "..", "docs/_examples"), ignore_errors=True)
shutil.copytree(
    os.path.join(conf_location, "..", "examples"),
    os.path.join(conf_location, "..", "docs/_examples"),
    ignore=all_but_ipynb,
)

# -- End of code from nbsphinx repo ------------------------------------------
