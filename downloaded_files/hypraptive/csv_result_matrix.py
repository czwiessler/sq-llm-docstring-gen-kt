#! /usr/bin/python3

import csv
import os
import sys
import argparse
import xml_utils as u
import datetime
import pdb
from collections import defaultdict

all_labels=[
	'bc_adeane', 'bc_also', 'bc_amber', 'bc_aurora', 'bc_beatrice', 'bc_bella',
	'bc_bellanore', 'bc_bracket', 'bc_bruno', 'bc_caramel', 'bc_chestnut', 'bc_cleo',
	'bc_clyde', 'bc_coco', 'bc_cross-paw', 'bc_dani-bear', 'bc_diablo', 'bc_fisher',
	'bc_flora', 'bc_frank', 'bc_freckles', 'bc_freda', 'bc_freya', 'bc_gary', 'bc_gc',
	'bc_glory', 'bc_hoeya', 'bc_jaque', 'bc_kiokh', 'bc_kwatse', 'bc_lenore', 'bc_lillian',
	'bc_lil-willy', 'bc_lucky', 'bc_matsui', 'bc_millerd', 'bc_mouse', 'bc_neana',
	'bc_no-tail', 'bc_old-girl', 'bc_oso', 'bc_peanut', 'bc_pete', 'bc_pirate',
	'bc_pretty-boy', 'bc_river', 'bc_sallie', 'bc_santa', 'bc_shaniqua', 'bc_simoom',
	'bc_stella', 'bc_steve', 'bc_teddy-blonde', 'bc_teddy-brown', 'bc_toffee', 'bc_topaz',
	'bc_trouble', 'bc_tuna', 'bc_ursa', 'bf_032', 'bf_039', 'bf_045', 'bf_051', 'bf_068']
all_labels += [
	'bf_083', 'bf_089', 'bf_093', 'bf_094', 'bf_128', 'bf_130', 'bf_132', 'bf_151',
	'bf_153', 'bf_171', 'bf_201', 'bf_218', 'bf_261', 'bf_263', 'bf_273', 'bf_274',
	'bf_284', 'bf_289', 'bf_293', 'bf_294', 'bf_401', 'bf_402', 'bf_409', 'bf_410',
	'bf_415', 'bf_425', 'bf_435', 'bf_451', 'bf_461', 'bf_469', 'bf_474', 'bf_477',
	'bf_480', 'bf_482', 'bf_489', 'bf_500', 'bf_503', 'bf_504', 'bf_505', 'bf_510',
	'bf_511', 'bf_600', 'bf_602', 'bf_603', 'bf_604', 'bf_610', 'bf_611', 'bf_613',
	'bf_614', 'bf_615', 'bf_634', 'bf_700', 'bf_708', 'bf_717', 'bf_718',	 'bf_719',
	'bf_720', 'bf_744', 'bf_747', 'bf_755', 'bf_775', 'bf_813', 'bf_814', 'bf_818',
	'bf_854', 'bf_856', 'bf_868', 'bf_879'
	]

##------------------------------------------------------------
##  write_images
##------------------------------------------------------------
def write_images (images_d, filename) :
	images_fp = open (filename, "w")
	images_fp.write ("<html>\n<body>")
	images_fp.write ("<comment generated by cvs_result_matrix " + u.get_argv() + ">\n")

	for label1, content1 in sorted (images_d.items ()) :
		for label2, content2 in content1.items () :
			for i in range (int (len (content2)/3)) :
				image1 = content2[i*3]
				image2 = content2[i*3+1]
				dist = content2[i*3+2]

				images_fp.write (label1 + " &nbsp;&nbsp; --- ----- --- &nbsp;&nbsp; " + label2 )
				images_fp.write (' &nbsp;&nbsp; --- distance = &nbsp;&nbsp;' + dist + '<br>\n')
				images_fp.write ('<img src="' + image1 + '"><img src="' + image2 + '"><br>\n')
	images_fp.write ("</html>\n</body>")
	images_fp.close ()

##------------------------------------------------------------
##  print true - matrix_d is a defaultdict (defaultdict (list))
##    key = label. value = dict of labels, whose value is
##    l1, l2, result, expected result
##  write table of alls_labels accuracy number and count 
##------------------------------------------------------------
def write_matched_result_table (matrix_d, filename) :
	right = 1
	wrong = 0
	matrix_fp = open (filename, "w")
	## using static list instead.  need all output lists to have the same labels
	uniq_labels = sorted (all_labels)

	matrix_fp.write (' ,')
	matrix_fp.write ('accuracy, count\n')
	for label1 in uniq_labels :
		if len (matrix_d[label1]) == 0 or len (matrix_d[label1][label1]) == 0 :  # no data
			matrix_fp.write (label1 + ', , ')  # whole row
		else : # has data
			result = matrix_d[label1][label1]
			# pdb.set_trace ()
			accuracy = float (result[right]) / float (result[right]+result[wrong])
			accuracy_str = "%1.3f" % (accuracy)
			matrix_fp.write (label1 + ', ')  # row label
			matrix_fp.write (accuracy_str + ', ')	# row accuracy
			matrix_fp.write (str (result[right]+result[wrong])) # row count
		matrix_fp.write ('\n')

##------------------------------------------------------------
##  print matrix - matrix_d is a defaultdict (defaultdict (list))
##    key = label. value = dict of labels, whose value is
##    l1, l2, result, expected result
##  print matrix of alls_labels x all_labels populated with accuracy
##------------------------------------------------------------
def write_matrix (matrix_d, filename, write_accuracy=True) :
	right = 1
	wrong = 0
	labels = []
	matrix_fp = open (filename, "w")
	for label1, l1_content in matrix_d.items() :
		labels.append (label1)
		for label2, l2_content in l1_content.items() :
			labels.append (label2)
	labels_set = set (labels)
	uniq_labels = sorted (list (labels_set))
	## using static list instead.  need all output lists to have the same labels
	uniq_labels = sorted (all_labels)

	matrix_fp.write (' ,')
	for label in uniq_labels :   # write column labels
		matrix_fp.write (label + ',')
	matrix_fp.write ('\n')
	for label1 in uniq_labels :
		matrix_fp.write (label1 + ',')  # row label
		for label2 in uniq_labels :
			if len (matrix_d[label1][label2]) :
				result = matrix_d[label1][label2]
				if write_accuracy :
					accuracy = float (result[right]) / float (result[right]+result[wrong])
					accuracy_str = "%1.3f, " % (accuracy)
					matrix_fp.write (accuracy_str)
				else :
					matrix_fp.write (str (result[right]+result[wrong]))
					matrix_fp.write (', ')
			else :
				matrix_fp.write ('  , ')
		matrix_fp.write ('\n')
		

##------------------------------------------------------------
##  generate matrix (defaultdict (defaultdict(list)) from list of:
##		label1, label1, result, expected_result, chip1, chip2, distance, max_distance
##------------------------------------------------------------
def gen_matrix (files) :
	right = 1
	wrong = 0
	results = defaultdict (lambda: defaultdict (list))
	images_true_pos = defaultdict (lambda: defaultdict (list))
	images_true_neg = defaultdict (lambda: defaultdict (list))
	images_false_pos = defaultdict (lambda: defaultdict (list))
	images_false_neg = defaultdict (lambda: defaultdict (list))
	print ('\n\tgenerated files: ')
	for filename in files:
		## with open(file,newline='') as csvfile:
		with open(filename) as csvfile :
			fileContent = csv.reader(csvfile, delimiter=',', quotechar='|')
			# pdb.set_trace ()
			for row in fileContent:
				label1 = row[0]
				label2 = row[1]
				returnValue = row[2]
				expectedValue = row[3]
				image1 = row[4]
				image2 = row[5]
				dist = row[6]
				# pdb.set_trace ()
				if len (results[label1][label2]) == 0 :
					results[label1][label2].append (0)
					results[label1][label2].append (0)
				result = results[label1][label2]
				# pdb.set_trace ()
				if returnValue == expectedValue :  # correct -> true
					result[right] += 1
					if returnValue == '1' : # guessed positive
						images_true_pos[label1][label2].append (image1)
						images_true_pos[label1][label2].append (image2)
						images_true_pos[label1][label2].append (dist)
					else :  # guessed negative
						images_true_neg[label1][label2].append (image1)
						images_true_neg[label1][label2].append (image2)
						images_true_neg[label1][label2].append (dist)
				else: 	# incorrect -> false
					result[wrong] += 1
					if returnValue == '1' : # guessed positive
						images_false_pos[label1][label2].append (image1)
						images_false_pos[label1][label2].append (image2)
						images_false_pos[label1][label2].append (dist)
					else :  # guessed negative
						images_false_neg[label1][label2].append (image1)
						images_false_neg[label1][label2].append (image2)
						images_false_neg[label1][label2].append (dist)

		newfile = os.path.basename (filename)
		write_matrix (results, newfile + "_ratio.csv")
		print ('\t\t', newfile + '_ratio.csv')
		write_matrix (results, newfile + "_count.csv", False)
		print ('\t\t', newfile + '_count.csv')
		write_matched_result_table (results, newfile + '_matched_pairs.csv')
		print ('\t\t', newfile + '_matched_pairs.csv')
		results.clear ()
	curtime = datetime.datetime.now().strftime("%Y%m%d_%H%M")
	write_images (images_true_pos, 'true_pos_'+curtime+'.html')
	write_images (images_true_neg, 'true_neg_'+curtime+'.html')
	write_images (images_false_pos, 'false_pos_'+curtime+'.html')
	write_images (images_false_neg, 'false_neg_'+curtime+'.html')
	print ('\t\t', 'true_pos_'+curtime+'.html')
	print ('\t\t', 'true_neg_'+curtime+'.html')
	print ('\t\t', 'false_pos_'+curtime+'.html')
	print ('\t\t', 'false_neg_'+curtime+'.html')

##------------------------------------------------------------
##  xml_chip_face_stats *.xml dirs
##    average point of all noses, eye1_x, eye1_y, eye2_x, eye2_y, eye_dist
##
##   
##------------------------------------------------------------
def main (argv) :
	parser = argparse.ArgumentParser(description='\nGenerate matrix of test results.',
		formatter_class=lambda prog: argparse.HelpFormatter(prog,max_help_position=50))
	parser.add_argument ('files', nargs='+')
		# help="increase output verbosity"
	args = parser.parse_args()
	print ("files: ", args.files)
	gen_matrix (args.files) 

if __name__ == "__main__":
	main (sys.argv)

